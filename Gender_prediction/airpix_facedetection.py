# -*- coding: utf-8 -*-
"""AirPix_facedetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cv_wpOYLL4SoyjebqjHdoVyI--vKl6ly
"""

!pip install pafy

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from glob import glob

import cv2
import numpy as np


#url of the video to predict Age and gender
#url = 'https://www.youtube.com/watch?v=c07IsbSNqfI&feature=youtu.be'
#vPafy = pafy.new(url)
#play = vPafy.getbest(preftype="mp4")

#cap = cv2.VideoCapture(play.url)



"""## Model """

! git clone https://github.com/balajisrinivas/Gender-Detection.git

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.layers import BatchNormalization,Conv2D,Flatten,Dense,Activation,Dropout,MaxPool2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import BinaryCrossentropy
from tensorflow.keras.models import Sequential

# parameters
epochs=100
batch_size=64
img_dims=(96,96,3)
lr=1e-3
data=[]
labels=[]
from glob import glob
import random

# useful for getting number of output classes
import os
from tensorflow.keras.preprocessing.image import img_to_array
image_files=[f for f in glob(r'/content/Gender-Detection/gender_dataset_face'+"/**/*",recursive=True)]
random.shuffle(image_files)
for img in image_files:
    image=cv2.imread(img)
    try:
        img1= cv2.resize(image, (img_dims[0],img_dims[1]))
            
    except:
        break
   
    label=img.split('/')[-2]

    if label=='woman':
        label=1
    elif label=='man':
        label=0
    else:
        pass
    image=img_to_array(img1)
    data.append(image)    
    labels.append([label])

len(data)

len(labels)

data=np.array(data,dtype='float')
labels=np.array(labels,dtype='float')
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(data,labels,test_size=0.2,random_state=2)

x_train.shape
y_train.shape

x_test.shape
y_test.shape

from tensorflow.keras.utils import to_categorical,plot_model

trainx=to_categorical(y_train,num_classes=2)
trainy=to_categorical(y_test,num_classes=2)
trainx.shape

aug=ImageDataGenerator(rotation_range=25,width_shift_range=0.1,height_shift_range=0.1,shear_range=0.2,zoom_range=0.2,horizontal_flip=True,fill_mode='nearest')





def build(width,height,depth,classes):
    
 model=Sequential()
 input_shape=(height,width,depth)
 chandim=-1
 
 model.add(Conv2D(32,(3,3), padding='same',activation='relu',input_shape=img_dims))
 model.add(MaxPool2D(pool_size=(3,3)))
 model.add(Dropout(0.25))

 model.add(Conv2D(64,(3,3),padding='same',activation='relu'))
 model.add(MaxPool2D(pool_size=(3,3)))

 model.add(Conv2D(128,(3,3),padding='same',activation='relu'))
 model.add(MaxPool2D(pool_size=(3,3)))
 model.add(Dropout(0.25))

 model.add(Flatten())
 model.add(Dense(1024))
 model.add(Activation('relu'))
 model.add(Dropout(0.25))

 model.add(Dense(2))
 model.add(Activation('sigmoid'))
 return model
model=build(width=img_dims[0],height=img_dims[1],depth=img_dims[2],classes=2)
opt=Adam(lr,decay=lr/epochs)

model.compile(loss='binary_crossentropy',optimizer=opt,metrics=['accuracy'])
model.fit_generator(aug.flow(x_train,trainx,batch_size=batch_size),
                    validation_data=(x_test,trainy),
                    steps_per_epoch=len(x_train)//batch_size,
                    verbose=1,epochs=epochs)

#model.save('gender_detection.model')

# fit the model
# Run the cell. It will take some time to execute
#r = model.fit_generator(training_set,epochs=50)

from tensorflow.keras.models import load_model

## PREDICTION ------------------>>>>>>
from keras.preprocessing import image
img=image.load_img('/content/download (13).jpg',target_size=(96,96))
x=image.img_to_array(img)
x.shape

x=np.expand_dims(x,axis=0)
img_data=preprocess_input(x)
img_data.shape

model1=load_model('/content/Gender-Detection/gender_detection.model')
model1.predict(img_data)

